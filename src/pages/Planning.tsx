
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { Calendar, Users, Settings, Play, User } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/hooks/use-toast';
import { planningService } from '@/services/planningService';
import { supabase } from '@/integrations/supabase/client';
import { format } from 'date-fns';
import DailyTimeline from '@/components/DailyTimeline';
import PersonalPlanningGenerator from '@/components/PersonalPlanningGenerator';
import PlanningControls from '@/components/PlanningControls';

const Planning = () => {
  const { lang = 'nl' } = useParams();
  const { toast } = useToast();
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [schedules, setSchedules] = useState([]);
  const [workstationSchedules, setWorkstationSchedules] = useState([]);
  const [employees, setEmployees] = useState([]);
  const [workstations, setWorkstations] = useState([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isGeneratingWorkstation, setIsGeneratingWorkstation] = useState(false);
  const [activeTab, setActiveTab] = useState('overview');

  // Fetch schedules for the selected date
  const fetchSchedules = async () => {
    try {
      const data = await planningService.getSchedulesByDate(selectedDate);
      setSchedules(data);
    } catch (error) {
      console.error('Error fetching schedules:', error);
      toast({
        title: 'Error',
        description: 'Failed to fetch schedules',
        variant: 'destructive'
      });
    }
  };

  // Fetch workstation schedules for the selected date
  const fetchWorkstationSchedules = async () => {
    try {
      const data = await planningService.getWorkstationSchedulesByDate(selectedDate);
      setWorkstationSchedules(data);
    } catch (error) {
      console.error('Error fetching workstation schedules:', error);
      toast({
        title: 'Error',
        description: 'Failed to fetch workstation schedules',
        variant: 'destructive'
      });
    }
  };

  // Fetch employees and workstations
  const fetchEmployeesAndWorkstations = async () => {
    try {
      const [employeesResponse, workstationsResponse] = await Promise.all([
        supabase.from('employees').select('*'),
        supabase.from('workstations').select('*')
      ]);

      if (employeesResponse.error) throw employeesResponse.error;
      if (workstationsResponse.error) throw workstationsResponse.error;

      setEmployees(employeesResponse.data || []);
      setWorkstations(workstationsResponse.data || []);
    } catch (error) {
      console.error('Error fetching employees and workstations:', error);
      toast({
        title: 'Error',
        description: 'Failed to fetch employees and workstations',
        variant: 'destructive'
      });
    }
  };

  useEffect(() => {
    fetchSchedules();
    fetchWorkstationSchedules();
    fetchEmployeesAndWorkstations();
  }, [selectedDate]);

  const handleGeneratePlan = async () => {
    setIsGenerating(true);
    try {
      await planningService.generateDailyPlan(selectedDate);
      await fetchSchedules();
      toast({
        title: 'Success',
        description: 'Planning generated successfully',
      });
    } catch (error: any) {
      console.error('Error generating plan:', error);
      toast({
        title: 'Error',
        description: error.message || 'Failed to generate plan',
        variant: 'destructive'
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleGenerateWorkstationSchedules = async () => {
    setIsGeneratingWorkstation(true);
    try {
      await planningService.generateWorkstationSchedules(selectedDate);
      await fetchWorkstationSchedules();
      toast({
        title: 'Success',
        description: 'Workstation schedules generated successfully',
      });
    } catch (error: any) {
      console.error('Error generating workstation schedules:', error);
      toast({
        title: 'Error',
        description: error.message || 'Failed to generate workstation schedules',
        variant: 'destructive'
      });
    } finally {
      setIsGeneratingWorkstation(false);
    }
  };

  const formatSchedulesForTimeline = (schedules: any[]) => {
    return schedules.map(schedule => ({
      id: schedule.id,
      title: schedule.title,
      description: schedule.description || '',
      startTime: schedule.start_time,
      endTime: schedule.end_time,
      employeeName: schedule.employee?.name || 'Unknown',
      taskId: schedule.task_id,
      isAutoGenerated: schedule.is_auto_generated,
      priority: schedule.task?.priority || 'Medium'
    }));
  };

  const formatWorkstationSchedulesForTimeline = (schedules: any[]) => {
    return schedules.map(schedule => ({
      id: schedule.id,
      title: schedule.task_title,
      description: `Workstation: ${schedule.workstation?.name || 'Unknown'}`,
      startTime: schedule.start_time,
      endTime: schedule.end_time,
      employeeName: schedule.user_name,
      workstationId: schedule.workstation_id,
      workstationName: schedule.workstation?.name || 'Unknown',
      priority: 'Medium'
    }));
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold text-gray-900">Planning</h1>
        <div className="flex items-center space-x-2 text-sm text-gray-600">
          <Calendar className="h-4 w-4" />
          <span>{format(selectedDate, 'EEEE, MMMM d, yyyy')}</span>
        </div>
      </div>

      <PlanningControls
        selectedDate={selectedDate}
        onDateChange={setSelectedDate}
        onGeneratePlan={handleGeneratePlan}
        isGenerating={isGenerating}
      />

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="overview" className="flex items-center gap-2">
            <Calendar className="h-4 w-4" />
            Overview
          </TabsTrigger>
          <TabsTrigger value="employees" className="flex items-center gap-2">
            <Users className="h-4 w-4" />
            Employee Schedules
          </TabsTrigger>
          <TabsTrigger value="workstations" className="flex items-center gap-2">
            <Settings className="h-4 w-4" />
            Workstation Schedules
          </TabsTrigger>
          <TabsTrigger value="personal" className="flex items-center gap-2">
            <User className="h-4 w-4" />
            Personal Planning
          </TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Schedules</CardTitle>
                <Calendar className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{schedules.length}</div>
                <p className="text-xs text-muted-foreground">
                  Employee schedules for today
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Workstation Schedules</CardTitle>
                <Settings className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{workstationSchedules.length}</div>
                <p className="text-xs text-muted-foreground">
                  Workstation assignments for today
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Active Employees</CardTitle>
                <Users className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {new Set(schedules.map(s => s.employee_id)).size}
                </div>
                <p className="text-xs text-muted-foreground">
                  Employees with schedules
                </p>
              </CardContent>
            </Card>
          </div>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Calendar className="h-5 w-5" />
                Daily Overview
              </CardTitle>
            </CardHeader>
            <CardContent>
              <DailyTimeline
                schedules={formatSchedulesForTimeline(schedules)}
                selectedDate={selectedDate}
                onScheduleUpdate={fetchSchedules}
              />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="employees" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Users className="h-5 w-5" />
                Employee Schedules
              </CardTitle>
            </CardHeader>
            <CardContent>
              <DailyTimeline
                schedules={formatSchedulesForTimeline(schedules)}
                selectedDate={selectedDate}
                onScheduleUpdate={fetchSchedules}
              />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="workstations" className="space-y-6">
          <div className="flex justify-between items-center">
            <h2 className="text-xl font-semibold">Workstation Schedules</h2>
            <Button 
              onClick={handleGenerateWorkstationSchedules}
              disabled={isGeneratingWorkstation}
              className="flex items-center gap-2"
            >
              <Play className="h-4 w-4" />
              {isGeneratingWorkstation ? 'Generating...' : 'Generate Workstation Schedules'}
            </Button>
          </div>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Settings className="h-5 w-5" />
                Workstation Assignments
              </CardTitle>
            </CardContent>
            <CardContent>
              <DailyTimeline
                schedules={formatWorkstationSchedulesForTimeline(workstationSchedules)}
                selectedDate={selectedDate}
                onScheduleUpdate={fetchWorkstationSchedules}
              />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="personal" className="space-y-6">
          <PersonalPlanningGenerator
            selectedDate={selectedDate}
            employees={employees}
            onScheduleGenerated={fetchSchedules}
          />
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default Planning;
